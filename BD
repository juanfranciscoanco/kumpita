using System;
using System.Collections.Generic;

#nullable disable

namespace BD
{
    public partial class Beer
    {
        public int CodBeer { get; set; }
        public string NomBeer { get; set; }
        public int? Cantidad { get; set; }
    }
}


using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace BD
{
    public partial class DBSharpContext : DbContext
    {
        public DBSharpContext()
        {
        }

        public DBSharpContext(DbContextOptions<DBSharpContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Beer> Beers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
//                optionsBuilder.UseSqlServer("Server=TID-19NS3-155; Database=DBSharp; Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Beer>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Beer");

                entity.Property(e => e.CodBeer).ValueGeneratedOnAdd();

                entity.Property(e => e.NomBeer)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}



using BD;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;

namespace EntityFrameworkSystem
{
    class Program
    {
        static void Main(string[] args)
        {
            DbContextOptionsBuilder<DBSharpContext> optionsBuilder = new DbContextOptionsBuilder<DBSharpContext>();
            optionsBuilder.UseSqlServer("Server=TID-19NS3-155; Database=DBSharp; Trusted_Connection=True;");
            bool menu = true;
            int op = 0;

            do
            {
                ShowMenu();
                Console.WriteLine("Elige una opcion:");
                op = int.Parse(Console.ReadLine());
                switch (op)
                {
                    case 1:
                        Show(optionsBuilder);
                        break;
                }
            } while (menu);

            //using (DBSharpContext context = new DBSharpContext(optionsBuilder.Options))
            //{
            //    var beers = context.Beers.ToList();
            //    foreach (var item in beers)
            //    {
            //        Console.WriteLine(item.NomBeer);
            //    }
            //}
        }

        public static void Show(DbContextOptionsBuilder<DBSharpContext> optionsBuilder)
        {
            Console.Clear();
            using (var context = new DBSharpContext(optionsBuilder.Options))
            {
                List<Beer> beers = context.Beers.ToList();
                foreach (var item in beers)
                {
                    Console.WriteLine($"{item.CodBeer} - {item.NomBeer}");
                }
            }
        }

        public static void ShowMenu()
        {
            Console.WriteLine("\n---------Menu----------");
            Console.WriteLine("1.- Mostrar");
            Console.WriteLine("2.- Agregar");
            Console.WriteLine("3.- Editar");
            Console.WriteLine("4.- Eliminar");
            Console.WriteLine("5.- Salir");
        }
    }
}

